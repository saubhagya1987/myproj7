<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-4.1.xsd
	http://www.springframework.org/schema/security/oauth2
	http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.1.xsd">
    
           <context:annotation-config />
		   
			<!-- <bean id="jacksonMessageConverter"
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter ">
			</bean>
			
			<bean
				class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
				<property name="messageConverters">
					<list>
						<ref bean="jacksonMessageConverter" />
					</list>
				</property>
			</bean> -->

			<sec:http pattern="/oauth/**" create-session="never"	use-expressions="true" authentication-manager-ref="authenticationManager">
				<sec:intercept-url pattern="/oauth/**"	access="hasAnyRole('ROLE_FSE','ROLE_ADMIN','ROLE_CHABEBA','ROLE_BOOTH','ROLE_MINISHOP','ROLE_AIRTEL_MONEY_EXPRESS_SHOP','ROLE_COFO_AIRTEL_SHOP','ROLE_COCO_AIRTEL_SHOP','ROLE_AGENCY','ROLE_CHAIN_STORES','ROLE_OWN_DEVICE_CHAIN_STORES','ROLE_SSO','ROLE_ENTERPRISE','ROLE_DATA_EXECUTIVE','ROLE_KYC_SUPERVISOR','ROLE_OWN_DEVICE_RETAILER','ROLE_OWN_DEVICE_CHABEBA','ROLE_CUSTOMER_SERVICE','ROLE_REGULATORY','ROLE_SUPERVISOR_AUDIT','ROLE_SND','ROLE_ZBM','ROLE_TSM','ROLE_REGULATORY','ROLE_SND_NATIONAL_TEAM','ROLE_CUSTOMER_SERVICE','ROLE_INTERNAL_AUDITOR','ROLE_SND_DIRECTOR','ROLE_DATA_ENTRY','ROLE_DATA_EXE_AUDIT','ROLE_CHANNEL_PARTNER','ROLE_WAREHOUSE','ROLE_AM_AGENT')" />
				<sec:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
				<sec:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
				<sec:custom-filter ref="oAuth2ClientContextFilter"	after="EXCEPTION_TRANSLATION_FILTER	" />
				<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
				<sec:csrf disabled="true"/>
			</sec:http>
		
			<sec:http pattern="/api/subscriber/getSubscriberImage" security="none" />
			<sec:http pattern="/api/testsms" security="none" />
			<!-- <sec:http pattern="/api/subscriber/registerExistingSubscriber" security="none" /> -->			
			<sec:http pattern="/api/user/generateOtp" security="none" />
			<sec:http pattern="/api/user/validateOtp" security="none" />
			<sec:http pattern="/api/user/forgotPassword" security="none" />				
			<sec:http pattern="/api/user/validateUser" security="none" />
			<sec:http pattern="/api/gkyc/getGkycStatus" security="none" />
			<sec:http pattern="/api/subscriber/validateSIM" security="none" />	
			<sec:http pattern="/api/helper/location/district" security="none" />	
			<!-- <sec:http pattern="/api/user/encryptedJson" security="none" />	 -->
			<sec:http pattern="/api/user/password/*" security="none" />	
			<sec:http pattern="/api/**" create-session="never"	use-expressions="true" authentication-manager-ref="authenticationManager">
				<sec:intercept-url pattern="/api/**" method="POST" access="hasAnyRole('ROLE_FSE','ROLE_ADMIN','ROLE_CHABEBA','ROLE_BOOTH','ROLE_MINISHOP','ROLE_AIRTEL_MONEY_EXPRESS_SHOP','ROLE_COFO_AIRTEL_SHOP','ROLE_COCO_AIRTEL_SHOP','ROLE_AGENCY','ROLE_CHAIN_STORES','ROLE_OWN_DEVICE_CHAIN_STORES','ROLE_SSO','ROLE_ENTERPRISE','ROLE_DATA_EXECUTIVE','ROLE_KYC_SUPERVISOR','ROLE_OWN_DEVICE_RETAILER','ROLE_OWN_DEVICE_CHABEBA','ROLE_CUSTOMER_SERVICE','ROLE_REGULATORY','ROLE_SUPERVISOR_AUDIT','ROLE_SND','ROLE_ZBM','ROLE_TSM','ROLE_REGULATORY','ROLE_SND_NATIONAL_TEAM','ROLE_CUSTOMER_SERVICE','ROLE_INTERNAL_AUDITOR','ROLE_SND_DIRECTOR','ROLE_DATA_ENTRY','ROLE_DATA_EXE_AUDIT','ROLE_CHANNEL_PARTNER','ROLE_WAREHOUSE','ROLE_AM_AGENT')" />
				<sec:custom-filter ref="resourceServerFilter"	before="PRE_AUTH_FILTER" />
				<sec:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
				<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
				<sec:csrf disabled="true"/>
				<sec:anonymous enabled="false" />
			</sec:http>
			
			
			
			<sec:http pattern="/client/**" security="none" />	
			<!-- <sec:http pattern="/client/**" create-session="never"	use-expressions="true" authentication-manager-ref="authenticationManager" >
				<sec:intercept-url pattern="/client/**" access="hasAnyRole('ROLE_FSE','ROLE_ADMIN','ROLE_CRE','ROLE_BACK_OFFICE','ROLE_CM','ROLE_CM_S','ROLE_KYC_C','ROLE_Report','ROLE_Back Ofc','ROLE_channel')" />
				<sec:custom-filter ref="resourceServerFilter"	before="PRE_AUTH_FILTER" />
				<sec:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
				<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
				<sec:anonymous enabled="false" />
				<sec:csrf disabled="true"/>
			</sec:http> -->
		
			<!-- If authentication fails and the caller has asked for a specific content type response, this entry point can send one, along with a standard 401 status -->
			<bean id="clientAuthenticationEntryPoint"	class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
				<property name="realmName" value="Authorization/client" />
				<property name="typeName" value="Basic" />
			</bean>
	
			<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
				<property name="realmName" value="Authorization" />
			</bean>
 
			<!-- Allows clients to authenticate using request parameters if included 
			as a security filter. It is recommended by the specification that you permit 
			HTTP basic authentication for clients, and not use this filter at all. -->
			
			<!-- <bean id="clientCredentialsTokenEndpointFilter"	class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
				<property name="authenticationManager" ref="authenticationManager" />
			</bean> -->
			
			<bean id="clientCredentialsTokenEndpointFilter"	class="com.airtel.user.security.ClientCredentialToken">
				<property name="authenticationManager" ref="authenticationManager" />
			</bean>

 			<bean id="oAuth2ClientContextFilter" class="org.springframework.security.oauth2.client.filter.OAuth2ClientContextFilter"></bean>
	
	 		<!-- Create client details bean for manage client details from database -->
			<!-- The JdbcClientDetailsService provide default implementation for fetching 
			the data from oauth_client_details table Other wise we need to create our 
			custom class that Implement ClientDetailsService Interface and override its 
			loadClientByClientId method -->
			<bean id="clientDetails" class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
				<constructor-arg index="0">	<ref bean="dataSource" />
				</constructor-arg>
			</bean>
 
	 		<!-- This class is the custom implementation of UserDetailSerive Interface 
			that provide by the spring, which we Need to implement and override its method. 
			But for Oauth spring provide us ClientDetailsUserDetailsService, which already 
			implement UserDetailSerive Interface and override its method. -->
			<bean id="clientDetailsUserService"	class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
				<constructor-arg ref="clientDetails" />
			</bean>
	
			
			<sec:authentication-manager alias="authenticationManager">
				<sec:authentication-provider user-service-ref="clientDetailsUserService">
					 <sec:password-encoder ref="passwordEncoder" /> 
				</sec:authentication-provider>
			</sec:authentication-manager>

			
			<bean id="kycAuthProvider" class="com.airtel.user.security.service.CustomAuthentication" />

			<sec:authentication-manager id="usersAuthenticationManager">
			   <sec:authentication-provider ref="kycAuthProvider" />
			</sec:authentication-manager>
			
			
			<!-- Authorization Server Configuration of the server is used to provide 
			implementations of the client details service and token services and to enable 
			or disable certain aspects of the mechanism globally. -->
			<oauth:authorization-server
				client-details-service-ref="clientDetails" token-services-ref="tokenServices"
				user-approval-handler-ref="userApprovalHandler">
				<oauth:authorization-code />
				<oauth:implicit />
				<oauth:refresh-token />
				<oauth:client-credentials />
				<oauth:password authentication-manager-ref="usersAuthenticationManager" />
			</oauth:authorization-server>
 
			<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />


	 		<!-- Oauth Token Service Using Database -->
			<!-- The JdbcTokenStore class provide the default implementation from access 
			the token from database. If we want to customize the JDBC implementation 
			we need to implement TokenStore interface and overrider its methods -->
			<!-- <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore"> -->
			<bean id="tokenStore" class="com.airtel.kyc.config.CustomTokenStore">
				<constructor-arg ref="dataSource" />
			</bean>

			<bean id="userTokenEnhancer" class="com.airtel.user.security.UserTokenEnhancer"/>

			<!-- This the service class which is used to access the function of JdbcTokenStore 
			class. This is like MVC structure JdbcTokenStore is Dao layer and DefaultTokenServices 
			is service layer -->
			<bean id="tokenServices" class="com.airtel.user.security.MYTokenServices">
				<property name="tokenStore" ref="tokenStore" />
				<property name="supportRefreshToken" value="true" /> 
				<property name="clientDetailsService" ref="clientDetails" />
				<property name="accessTokenValiditySeconds" value="3596400" />
				<property name="tokenEnhancer" ref="userTokenEnhancer" />
			</bean>
		
			<!-- A user approval handler that remembers approval decisions by consulting existing tokens -->
			<bean id="oAuth2RequestFactory"	class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
				<constructor-arg ref="clientDetails" />
			</bean>
		
			<bean id="userApprovalHandler"	class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
				<property name="requestFactory" ref="oAuth2RequestFactory" />
				<property name="tokenStore" ref="tokenStore" />
			</bean>
	
			<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
				<constructor-arg>
				<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
				</list>
				</constructor-arg>
			</bean>

			<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
				<constructor-arg name="strength" value="11" />
			</bean>
	
			<!-- <bean id="tokenGranter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenGranter" >
				<constructor-arg name="clientDetailsService" ref="clientDetails"></constructor-arg>
				<constructor-arg name="tokenServices" ref="tokenServices"></constructor-arg>
			</bean> -->
	
			<!-- A Resource Server serves resources that are protected by the OAuth2 
			token. Spring OAuth provides a Spring Security authentication filter that 
			implements this protection. -->
			<oauth:resource-server id="resourceServerFilter" token-services-ref="tokenServices" resource-id="KYC" />
		

</beans>